{"version":3,"sources":["App.jsx","registerServiceWorker.js","index.js"],"names":["App","state","photos","_this2","this","fetch","then","res","json","photosArray","setState","_this$state$photos","react_default","a","createElement","Fragment","className","map","photo","alt","filename","key","id","src","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yNAsDeA,oNA3CbC,MAAQ,CAAEC,OAAQ,uFAOE,IAAAC,EAAAC,KAClBC,MAZmB,8BAahBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAW,OAAIN,EAAKO,SAAS,CAAER,OAAQO,uCAExC,IAAAE,EACiBP,KAAKH,MAArBC,cADD,IAAAS,EACU,GADVA,EAEP,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sKAMFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAIZd,EAAOe,IAAI,SAAAC,GAAK,OACfN,EAAAC,EAAAC,cAAA,OACEK,IAAmDD,EAAME,SACzDC,IAA6CH,EAAMI,GACnDC,IAvCI,mCAwCmDL,EAAMI,gBAnCzDE,cCCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,KAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,kBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAuB,OAAMH,kBAAN,sBAEP3B,GAiDV,SAAiCO,GAE/B3B,MAAM2B,GACH1B,KAAK,SAAAkD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMvD,KAAK,SAAA8B,GACjCA,EAAa0B,aAAaxD,KAAK,WAC7BqB,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBY,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMvD,KAAK,WACjCoC,QAAQC,IACN,+GAMJZ,EAAgBC,MCzCxBiC","file":"static/js/main.b6efb186.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// This URL can be combined with an photo id to fetch an photo.\nconst PHOTO_URL = \"https://picsum.photos/200?photo=\";\n// This URL can be used to get an array of objects that contain information\n// about various photos.\nconst PHOTO_LIST_URL = \"https://picsum.photos/list\";\n\nclass App extends Component {\n  // 1. Declare a state object that will be used to track an array of photos\n  state = { photos: [] };\n\n  // 2. Declare a life cycle method\n  // This life cycle method should:\n  //  - will be called after the component is initially rendered\n  // - will fetch an array of photos\n  // - will add that array of photos to state once received\n  componentDidMount() {\n    fetch(PHOTO_LIST_URL)\n      .then(res => res.json())\n      .then(photosArray => this.setState({ photos: photosArray }));\n  }\n  render() {\n    const { photos = [] } = this.state;\n    return (\n      <React.Fragment>\n        <header>\n          <h1>Photo Wall</h1>\n          <p>\n            Start by reading App.jsx and completing the numbered steps.\n            Afterward, delete this paragraph. Then, open up App.css and complete\n            the instructions there.\n          </p>\n        </header>\n        <div className=\"collage\">\n          {/* We use map here because Array.prototype.map is an expression,\n           * and for loops are not. You'll learn more about this soon!\n           */}\n          {photos.map(photo => (\n            <img\n              alt={/* 3. Fill me in with the photo's filename */ photo.filename}\n              key={/* 4. Fill me in with the photo's id */ photo.id}\n              src={\n                /* 5. Fill me in with the photo's URL */ PHOTO_URL + photo.id\n              }\n            />\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}